# -*- coding: utf-8 -*-
"""Copy of Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TjLKi5yjaCvcepobfhyKhlkPYYxvP-xa
"""

# prompt: import the file: /content/Aaradhya Gupta - revolutioncart_data.csv

import pandas as pd

df = pd.read_csv('/content/Aaradhya Gupta - revolutioncart_data.csv')

df

"""**Linear Regression Model**"""

# prompt: Consider monthly_revenue as target variable(Y) and others as (X)

X = df.drop('monthly_revenue', axis=1)
Y = df['monthly_revenue']

# prompt: Split the data into the Training and Test

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# prompt: Make prediction on the test set

from sklearn.linear_model import LinearRegression

# Create and train a Linear Regression model (replace with your desired model)
model = LinearRegression()
model.fit(X_train, Y_train)

# Make predictions on the test set
Y_pred = model.predict(X_test)

# prompt: predict accuracy of the model

from sklearn.metrics import mean_squared_error, r2_score

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, Y_pred)

# Calculate R-squared (coefficient of determination)
r2 = r2_score(Y_test, Y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

# prompt: Do the cross validation

from sklearn.model_selection import cross_val_score

# Perform cross-validation (e.g., 5-fold cross-validation)
cv_scores = cross_val_score(model, X, Y, cv=5, scoring='neg_mean_squared_error')

# Calculate the average MSE across folds
average_mse = -cv_scores.mean()

print(f"Average Mean Squared Error (MSE) across cross-validation folds: {average_mse}")

"""**Random Forest Regressor**"""

# prompt: Import the RandomForestRegressor

from sklearn.ensemble import RandomForestRegressor

# prompt: Consider monthly_revenue as target variable(Y) and others as (X)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor


df = pd.read_csv('/content/Aaradhya Gupta - revolutioncart_data.csv')

X = df.drop('monthly_revenue', axis=1)
Y = df['monthly_revenue']

# prompt: Split the data into the Training and Test

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# prompt: Make prediction on the test set

# Create and train a Random Forest Regression model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, Y_train)

# Make predictions on the test set
Y_pred_rf = rf_model.predict(X_test)

# prompt: predict accuracy of the model

# Calculate Mean Squared Error (MSE) for Random Forest
mse_rf = mean_squared_error(Y_test, Y_pred_rf)

# Calculate R-squared (coefficient of determination) for Random Forest
r2_rf = r2_score(Y_test, Y_pred_rf)

print(f"Random Forest - Mean Squared Error (MSE): {mse_rf}")
print(f"Random Forest - R-squared (R2): {r2_rf}")

# prompt: Do cross Validation

# Perform cross-validation (e.g., 5-fold cross-validation) for Random Forest
cv_scores_rf = cross_val_score(rf_model, X, Y, cv=5, scoring='neg_mean_squared_error')

# Calculate the average MSE across folds for Random Forest
average_mse_rf = -cv_scores_rf.mean()

print(f"Random Forest - Average Mean Squared Error (MSE) across cross-validation folds: {average_mse_rf}")

"""**Ensemble Model**"""

# prompt: Import the Support vector model

from sklearn.svm import SVR

# prompt: Consider monthly_revenue as target variable(Y) and others as (X)

# Define X and Y
X = df.drop('monthly_revenue', axis=1)
Y = df['monthly_revenue']

# prompt: Split the data into the Training and Test

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# prompt: Make prediction on the test set

# Make predictions on the test set using the trained model
Y_pred = model.predict(X_test)

# prompt: from sklearn.metrics import mean_squared_error, r2_score

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, Y_pred)

# Calculate R-squared (coefficient of determination)
r2 = r2_score(Y_test, Y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

# prompt: Do cross Validation

# Perform cross-validation (e.g., 5-fold cross-validation)
cv_scores = cross_val_score(model, X, Y, cv=5, scoring='neg_mean_squared_error')

# Calculate the average MSE across folds
average_mse = -cv_scores.mean()

print(f"Average Mean Squared Error (MSE) across cross-validation folds: {average_mse}")